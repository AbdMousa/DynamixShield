/*
 * Auto-Generated by NUKE!
 *   http://arbotix.googlecode.com
 */

#include <Servo.h>   //include the servo library to control the RobotGeek Servos
#include <DynamixelSerial.h>
#include <BioloidDynamixSerial.h>
#include <CommanderHS.h>
#include "nuke.h"

// Define one or the other depending upon which servo type you are using.
//#define AX12_HEXAPOD
#define AX18_HEXAPOD

#define INCLUDE_GRIPPER

#ifdef INCLUDE_GRIPPER
  #define WRIST_ID 19  //Servo ID that the wrist servo will be attached to
  #define GRIPPER_SERVO_PIN 2  //pin that the gripper 9g servo will be attached to

  #define WRIST_MIN 312
  #define WRIST_MAX 712

  #define GRIPPER_MIN 0
  #define GRIPPER_MAX 150

  //gripper and wrist servos
  Servo wristServo;
  Servo gripperServo;   //create an servo object for the 9g FT-FS90MG micro servo

  int wristPos = 512;  //Start at 90 degrees
  int wristAdd = 0;  //Start at 0 degrees add

  int gripperPos = 150;  //Start at 150 degrees
  int gripperAdd = 0;  //Start at 0 degrees add
  int gripPressure = 0;  //Pressure applied to grip

  bool controlGripper = true;
  bool lastChangeActive = false;

  const int pressurePin = A11;

#endif

DynamixelSerial dynamix(&Serial1);
BioloidDynamixSerial bioloid(&dynamix);

CommanderHS command = CommanderHS(&Serial3);
int multiplier;

#define RIPPLE_SPEED    1
#define AMBLE_SPEED     3
#define TRIPOD_SPEED    5

#ifdef AX12_HEXAPOD
#define TOP_SPEED      10
#endif

#ifdef AX18_HEXAPOD
#define TOP_SPEED      12
#endif

void configureServos() {
  // setup serial
  Serial.begin(57600);
  while(!Serial);
  Serial.println("Starting setup");

  //Start the dynamixel serial controller
  dynamix.begin (); 

  //Start the XBee commander controller.
  command.begin(38400);
    
#ifdef INCLUDE_GRIPPER
  dynamix.moveSpeed (WRIST_ID, 512, 150);

  //attach and set gripper and wrist servos  
  gripperServo.attach(GRIPPER_SERVO_PIN);
  gripperServo.write(gripperPos);    // sets the servo position to 150 degress, positioning the servo for the gripper
#endif

  Serial.println("Finished servo config");
}

void setup(){
  configureServos();
  
  pinMode(0,OUTPUT);
  // setup IK
  setupIK(&bioloid);
  gaitSelect(AMBLE_SMOOTH);

  // wait, then check the voltage (LiPO safety)
  delay (1000);
  float voltage = dynamix.readVoltage(1);
  Serial.print ("System Voltage: ");
  Serial.print (voltage);
  Serial.println (" volts.");
  if (voltage < 10.0)
    while(1);

  // stand up slowly
  bioloid.poseSize = 18;
  Serial.println ("Reading poses");
  bioloid.readPose();
  Serial.println ("Doing IK");
  doIK();
  Serial.println ("interpolateSetup");
  bioloid.interpolateSetup(1000);

  Serial.println ("interpolating");
  while(bioloid.interpolating > 0){
    bioloid.interpolateStep();
    delay(3);
  }
  multiplier = AMBLE_SPEED;

  Serial.println ("Finished setup");
}

#ifdef INCLUDE_GRIPPER

void processGripperSelection() {

  if( (command.buttons&BUT_RT) && (command.buttons&BUT_LT) ) {
    if(!lastChangeActive) {
      controlGripper = !controlGripper;
      lastChangeActive = true;
      //Serial.print("setting controlgrip: "); Serial.println(controlGripper);
    }
  }
  else {
    lastChangeActive = false;
  }

  //Serial.print("controlgrip: "); Serial.print(controlGripper);
  //Serial.print(" lastchange : "); Serial.println(lastChangeActive);    
}

void processWrist() {
  if(command.buttons&BUT_LT){
    wristAdd = -5;
  }
  else if(command.buttons&BUT_RT){
    wristAdd = 5;
  }
  else {
    wristAdd = 0;
  }

  if(wristAdd != 0) {
    wristPos += wristAdd;
    if(wristPos > WRIST_MAX) {
      wristPos = WRIST_MAX;
    }
    else if(wristPos < WRIST_MIN) {
      wristPos = WRIST_MIN;
    }
    dynamix.moveSpeed (WRIST_ID, wristPos, 0);
    
    //Serial.print("Wrist Add: "); Serial.print(wristAdd);
    //Serial.print("  Wrist Pos: "); Serial.println(wristPos);    
  }
}

void processGripper() {

  gripPressure = analogRead(pressurePin);

  if(command.buttons&BUT_LT){
    gripperAdd = -5;
  }
  else if(command.buttons&BUT_RT && gripPressure < 850) {
    gripperAdd = 5;
  }
  else {
    gripperAdd = 0;
  }

  if(gripperAdd != 0) {
    gripperPos += gripperAdd;
    if(gripperPos > GRIPPER_MAX) {
      gripperPos = GRIPPER_MAX;
    }
    else if(gripperPos < GRIPPER_MIN) {
      gripperPos = GRIPPER_MIN;
    }
    gripperServo.write(gripperPos);
    
    //Serial.print("Grip Pressuer: "); Serial.print(gripPressure);
    //Serial.print("  Grip Add: "); Serial.print(gripperAdd);
    //Serial.print("  Grip Pos: "); Serial.println(gripperPos);    
  }
}

#endif

void loop(){
  // take commands
  if(command.ReadMsgs() > 0) {
    digitalWrite(0,HIGH-digitalRead(0));
    
    // select gaits
    if(command.buttons&BUT_R1){ 
      gaitSelect(RIPPLE_SMOOTH); 
      multiplier=RIPPLE_SPEED;
      Serial.println("RIPPLE_SMOOTH");
    }
    
    if(command.buttons&BUT_R2){ 
      gaitSelect(AMBLE_SMOOTH); 
      multiplier=AMBLE_SPEED;
      Serial.println("AMBLE_SMOOTH");
    }
    
    if(command.buttons&BUT_R3){ 
      gaitSelect(RIPPLE); 
      multiplier=RIPPLE_SPEED;
      Serial.println("RIPPLE");
    }
    
    if(command.buttons&BUT_L4){ 
      gaitSelect(AMBLE); 
      multiplier=AMBLE_SPEED;
      Serial.println("AMBLE");
    }
    
    if(command.buttons&BUT_L5){ 
      gaitSelect(TRIPOD); 
      multiplier=TRIPOD_SPEED;
      Serial.println("TRIPOD");
    }
    
    if(command.buttons&BUT_L6){ 
      gaitSelect(TRIPOD); 
      multiplier=TOP_SPEED;
      Serial.println("TRIPOD_TOP");
    }
    
    // set movement speed
    if((command.walkV) > 5 || (command.walkV < -5) ){
      Xspeed = (multiplier*command.walkV)/2;
    }
    else {
      Xspeed = 0;
    }
    
    if((command.walkH) > 5 || (command.walkH < -5) ){   
      Yspeed = (multiplier*command.walkH)/2;
    }
    else {
     Yspeed = 0;
    }
    
    if((command.lookH) > 5 || (command.lookH < -5) ){
      Rspeed = -(command.lookH)/100.0;
    }
    else {
      Rspeed = 0;
    }
  }
    
#ifdef INCLUDE_GRIPPER
    processGripperSelection();

    if(!lastChangeActive) {
      if(controlGripper) {
        processGripper();
      }
      else {
        processWrist();
      }    
    }
#endif
    
  // if our previous interpolation is complete, recompute the IK
  if(bioloid.interpolating == 0){
    doIK();
    bioloid.interpolateSetup(tranTime);
  }
  // update joints
  bioloid.interpolateStep();  
  
}
