/*
 * Auto-Generated by NUKE!
 *   http://arbotix.googlecode.com
 */

#include <DynamixelSerial.h>
#include <BioloidDynamixSerial.h>
#include <Commander.h>
#include "nuke.h"

// Define one or the other depending upon which servo type you are using.
#define AX12_HEXAPOD
//#define AX18_HEXAPOD

DynamixelSerial dynamix(&Serial2);
BioloidDynamixSerial bioloid(&dynamix);

Commander command = Commander();
int multiplier;

#define RIPPLE_SPEED    1
#define AMBLE_SPEED     3
#define TRIPOD_SPEED    5

#ifdef AX12_HEXAPOD
#define TOP_SPEED      10
#endif

#ifdef AX18_HEXAPOD
#define TOP_SPEED      12
#endif

void configureServos() {
  SetSystemCoreClockFor1Mbaud();

  // setup serial
  Serial.begin(57600);
  while(!Serial);
  Serial.println("Starting setup");

  dynamix.begin (1000000, 22); 
  
//  Serial.println("Set status return level");
//  for(int servo=1; servo<=18; servo++) {
//    dynamix.setStatusReturnLevel(servo, 1);
//    delay(50);
//  }
  
//  Serial.println("Set servo mode");
//  //Set the all servos to not be in wheel mode
//  for(int servo=1; servo<=18; servo++) {
//    dynamix.setEndless(servo, false);
//    delay(50);
//  }

//  Serial.println("Set limits");
//  //Set limits for all servos
//  for(int servo=1; servo<=18; servo++) {
//    dynamix.setCWLimit(servo, 0);
//    delay(50);
//    dynamix.setCCWLimit(servo, 1023);
//    delay(50);
//  }

//  Serial.println("Set defualt position");
//  //reset all servos to start position
//  for(int servo=1; servo<=18; servo++) {
//    dynamix.moveSpeed(servo, 512, 100);
//    delay(50);
//  }

  Serial.println("Finished servo config");
}

void setup(){
  configureServos();
  
  pinMode(0,OUTPUT);
  // setup IK
  setupIK(&bioloid);
  gaitSelect(AMBLE_SMOOTH);

  // wait, then check the voltage (LiPO safety)
  delay (1000);
  float voltage = 0; //////(ax12GetRegister (1, AX_PRESENT_VOLTAGE, 1)) / 10.0;
  Serial.print ("System Voltage: ");
  Serial.print (voltage);
  Serial.println (" volts.");
  //if (voltage < 10.0)
  //  while(1);

  // stand up slowly
  bioloid.poseSize = 18;
  Serial.println ("Reading poses");
  bioloid.readPose();
  Serial.println ("Doing IK");
  doIK();
  Serial.println ("interpolateSetup");
  bioloid.interpolateSetup(1000);

  Serial.println ("interpolating");
  while(bioloid.interpolating > 0){
    bioloid.interpolateStep();
    delay(3);
  }
  multiplier = AMBLE_SPEED;

  Serial.println ("Finished setup");
}

void loop(){
  // take commands
  if(command.ReadMsgs() > 0){
    digitalWrite(0,HIGH-digitalRead(0));
    // select gaits
    if(command.buttons&BUT_R1){ 
      gaitSelect(RIPPLE_SMOOTH); 
      multiplier=RIPPLE_SPEED;
    }
    if(command.buttons&BUT_R2){ 
      gaitSelect(AMBLE_SMOOTH); 
      multiplier=AMBLE_SPEED;
    }
    if(command.buttons&BUT_R3){ 
      gaitSelect(RIPPLE); 
      multiplier=RIPPLE_SPEED;
    }
    if(command.buttons&BUT_L4){ 
      gaitSelect(AMBLE); 
      multiplier=AMBLE_SPEED;
    }
    if(command.buttons&BUT_L5){ 
      gaitSelect(TRIPOD); 
      multiplier=TRIPOD_SPEED;
    }
    if(command.buttons&BUT_L6){ 
      gaitSelect(TRIPOD); 
      multiplier=TOP_SPEED;
    }
    // set movement speed
    if((command.walkV) > 5 || (command.walkV < -5) ){
      Xspeed = (multiplier*command.walkV)/2;
    }
    else
    {
      Xspeed = 0;
    }
    
    if((command.walkH) > 5 || (command.walkH < -5) ){   
    Yspeed = (multiplier*command.walkH)/2;
    }
    else
    {
     Yspeed = 0;
    }
    
    if((command.lookH) > 5 || (command.lookH < -5) ){
    Rspeed = -(command.lookH)/100.0;
    }
    else
    {
      Rspeed = 0;
    }
    
// Use the phoenix code if you want pretty body rotation. :)    
//
//    if((command.buttons&BUT_LT) > 0){
//      bodyRotY = (((float)command.lookV))/300.0;
//      bodyRotZ = ((float)command.lookH)/300.0;  
//      bodyRotX = ((float)command.walkH)/300.0;  
//      Rspeed = 0;
//      Xspeed = 0;
//      Yspeed = 0;  
//    }

 }

  // if our previous interpolation is complete, recompute the IK
  if(bioloid.interpolating == 0){
    doIK();
    bioloid.interpolateSetup(tranTime);
  }
  // update joints
  bioloid.interpolateStep();
}
